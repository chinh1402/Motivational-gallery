1. Writing signup / login / logout APIS
~ Optional: 2FA
<> Check if actually session is being saved, and how to use it on client side
==> Partly done.

2. Add 2127 motivational quotes onto mongoDB (cause of the api only have 2127 quotes)
=> Done

3. Rewrite quote model 
=> done

4. Dissecting the problem: where user when requesting for random quote everyday, they got their own set of random quote (not the same quotes sequence as others)
Solution:
- Create a new schema that save a pattern for their own random codes.

Day 1 => index 0
Day 2 => index 1
...

plotted day array
current index
current Day

- Create a code that return an array of sequence so that to be saved in db
=> done

- Handling inputting into mongoDB using the new schema
// when do people use the array of sequence? When they need a random sequence of quotes
// Why do they need a random sequence of quotes? Cause they signed up for the random quote email for the day.
=> build an emailSubscribedRandom API (the daily quote should be called: daily emailSubscribedDaily, which
has it own set of data)

Build API:

When invoked: User Click on Subcribe for daily email button (with an option)
Data expected to be sent from frontend?
=> 2 fields:
useremail (Type: String)
options (Object, for scalability. Cause maybe a specific tag for quotes)

// All of those doesn't use query use request body



What will expected to be in the API?
- emailSubscribedRandom API functionality:
Purpose: Create a specific quoteSequence for a specific userId
Checklist:
- Validate inputs
- Check user existance in database
- Generate Quote sequence
- Save Subscription Details
- Send Confirmation Response

=> Done

- emailSubscribedDaily API should be the same thing, except passing in a fixed sequence value
=> Done

Secure the email api using dotenv
=> Done

- emailUnsubscribed API
=> Done

- get-random-quote API, you can pass in a count in its query
=> Done

5. Setting up daily emails
=> Done, when program is running, by 5AM every morning GMT+7, email is expected to be sent

optional, but important: Configure the timezones for each individual user
optional 2: translate quote into their own specified language (infeasible)

6. Add an admin dashboard for monitoring site activities. Also add basic CRUD
- How to log in as an admin?
Idea: Only admin with specified google account can login as admin
-> Configure passport google sign up

Followed this tutorial: https://www.youtube.com/watch?v=tgO_ADSvY1I
==> GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET on .env

API callback path: http://localhost:3000/api/google/callback

Instructions flow:
.0: In your mongoDB schema must have `googleId: String`
.1: Configuring passportConfig.js file to use `new GoogleStrategy`
.2: Write get method routing for 2 paths: api/google, api/google/callback
.3: Write controller for them

// Still, I don't know how to use these...

To create an account, just redirect user to http://localhost/api/google, I dont know how the rest work ;>

After they sign in using google, they automatically login.
...

So, for the admin CRUD, I have to do 2 things
1. Ensure that it get redirected to the right path
2. Protect the path from outsider
=> Done

-> (Frontend): Check for session. Only session comes from admin email can do CRUD on all things
(use middleware)

- What api expected to be used?
Basic CRUD on quotes, quoteSequence, users.


- Since there's no user oriented activities, there's no point in having site activities... So I'm gonna
stick to basic CRUD

=> Done

7. Write a Tag schema, think of how can it interact with all others?
7.01. Update QuoteSequence, give it tags.
8. Write updateQuoteSequence APIS
9. Write startsending days and stop sending day logic, schema, codes flow,...
10. Adding Timezone, country onto user schema, and their other creds, like profile pic,...
11. Create a supportTicket schema


=======================================
0. If you decide to do these, Admin dashboard should also have a category to handle these aswell
7. Fetch quotes using specific day (Optional) 
8. Find quote in database by category, author name, content (Optional)
9. Refactor User schema, configure profile pages... (Optional) 
10. Save, heart, remove, report, share personal gallery (Optional)
11. Make a special category that user can CRUD their quotes (Optional, Security)
12. Custom quote sending through email option (Optional)
13. Quotes leaderboard (Optional)

o. Writing an embedded javascript
x. Set up timezones for specific country
xx. Set up DNS to servers worldwide
xxx. Make an AI that listen to others suggestions, then give quotes base on their suggestions! It also help with signing up daily quotes.
xxxx. Also an AI use the quote and generate a motivation pic just like on pinterest
xxxxx. Contribution for language...
========================================
-1. Make a new All available quotes for authenticated users



Frontend:
0. Remember to make a Thank you notification after they have subscribed!!
1. Find a design to fit your niche. Or Steal a design!!
2. Since you don't find a good fit for your design, design one yourself. 
Draw an userflow of what users can do before than, then prioritizes what you want users to do
Figma: Finally finished designing, with a prototype

...

7/8/2024

You have re-written quote.js, quoteSequence.js, user.js; adding tag.js and language.js for scalability. So:
1. Rewrite logic for ALL admin apis.
2. Adding API for Tags CRUD
3. Base on UI, think of more stuff to do...

8/8/2024
Backend
1. Only logout api need to be written in unregistered api pack
(nvm, it it already written). Check with logging req.isAuthenticated()
2. Make some changes for login/sign in base on new schema (done) 
3. Rewrite your CRUD apis
// needed testing: Get quoteSequence
Code is expected to support multiple query options at once, but the UI only does singular

4. I put every tag as ObjectID for scalability. Wish me luck!
=> Quote, QuoteSequence, tags
4.1. I deleted current Quote, tags. And re-fetch them. Now we have Quotes, Tags schemas database => objectID for tags are available
4.3. Test quotes, quoteSequence, User, Tags APIs
4.3.1. When adding / deleting quotes, adding / deleting from tags schema correspondingly
4.3.2. For quoteSequence, when creating, you add +1 tagSequence onto tags. You deleted with the same process. Users can't update the tags. So you dont have to do anything about
changing tags.

4.3.3. Rewrite user.js schema with required fields. and rewrite the admin controller.. And retest them


17/8
forgotthenumber. Design tags page (step 2 in step by step email sign up) -> done

List out all of the APIs you need to build based on UI

Unauthenticated

GetQuoteList API (For daily email on site, and for quoteGallery; and also to see possible quotes, get all related data for possible quotes)
GetQuoteListRandom API (For random quotes)

===> Done
I incorporated 2 APIs into 1 for reducing the API redundant purposes... Now we only have GetQuoteList API, and add random query params


Authenticated

EmailServiceSignup API 
(Remind yourself to build some Email sending templates)


ToggleEmailService API (pausing / continue services) x

handleQuoteFavorite API x
GetFavoriteQuotes API x
ChangePasswordRequest API x
DeleteUserRequest API x


GetAccountDetails API x
UpdateAccountRequest API x
UpdateAccountRequestConfirmed API x



1. Build a macro on the frontend that does calculate the lastSendingDay based on the number of quotes available. 
2. Adding when deleting users, delete the quote fav count for it. x


3. Adding userConsent field in quoteSequence. Due to the fact that mailServiceRunning can be changed if they press the continue the service. The 
Email re-confirm was a mandatory act. x

4. Make a screen to show that email is sent. After it is confirmed, show modal. 

0. Mandatory: Build responsive on figma. Then we can move on to frontend
0.-1: Build a screen for email service saying that it's waiting for userConsent.

21/8
test UI with different quote lengths:
<= 225: 2089 too long
<= 200: 2074 too long
<= 175: 2031 too long

<= 150: 1951 good enough
<= 125: 1778
<= 100: 1487

Add toolongforwebUI field for quote pre "save", then refetch quotes. 
Or just write a plugin that add in manually, it's easier that way
How does this works?
1. What interacts with quotes: 
all things that related to get / create / update / delete quotes.
all things that related to other schemas that save quotes.
re-create daily sequence with new boolean.
Users do get access to quotes that are too long
Quotes that are too long do get shown at singular quote showcase, but with limitation ...

==> Things that gonna be changed:
0.0: pre "save", add in "toolongforwebUI" if lengths is > 150 x 
0.1: Make a small module so that it add in toolongforwebUI for each fields. x
0.2: Re-create daily sequence with new toolongforwebUI = false x
0.3: Re-create gens for random quote sequence (unauthorized user) with toolongforwebUI = false x
0.4: This doesn't account for the fact that if the quote is later changed, 
All the related settings (after user / admin signing up for using this quote) will still be kept. The boolean toolongforwebUI can be changed upon saving. 
But those who happened to have that quote before it was shown, cant be changed, cause it was saved.
0.5 Test all of those changes x

0.51. Create quote sequence for admin also need that x

0.6 Test logout x
=> comment status 200 and then uncomment redirect

0.65 rewrite signup API. Put your emails 
problem occur now in signup API: x
1. If you were to sign up, after signing up, do users sign up using username or email? What happened if they used email to log in?
=> User aren't allowed to sign in using either information. They MUST verify on email first.
===> You need to make one Confirmed API x
=> Admins don't have to verify using email upon signing up for emails service.


0.7 Write emails sending for: 

User created (unauthenticated) x

http://localhost:3000/api/signup
http://localhost:3000/api/signupConfirmed?email=bausu@gmail.com

password changed (authenticated) x

http://localhost:3000/api/authenticated/changePasswordRequest
http://localhost:3000/api/authenticated/changePasswordConfirmed


User data updated (authenticated) x

http://localhost:3000/api/authenticated/updateAccountRequest
http://localhost:3000/api/authenticated/updateAccountRequestConfirmed


email service userConsent (authenticated)

http://localhost:3000/api/authenticated/emailServiceSignup
http://localhost:3000/api/authenticated/emailServiceSignupConfirmed


Tasks: 
1. Apply email services onto those apis
2. Change password chanign logic
AND WE'RE GOOOOOOOOOOOOOOOD

3. Make a small sign up / login form so that it saved session
=> Test session
=> Test all the emails services api


===> Remake password logic so that it takes in a Token, just to make the change password page not loading unintended

4. I forgot we need daily mails :>

0... After changing password, redirect the user to home page with success message

We do all of this shit good :D

Anywho

Last few final tasks:

0. Changing the update user and quote sequence to GET request
// nvm you can't do that logic
// Finished the logic


1. Rewrite daily email codes
2. Make daily email templates

26/8:
and we're done for the backend :>

30/8:
Start designing responsives on figma
1. 

2/9:

18/9: Since toeic is due on 2/10...? (Yagi)
Now's your task:
1. Organise the structure for your React project

You need to write 2 APIs

2. update quoteSequence APIs so that it takes in tagNames
3. retest all the apis that got affected

Create Quote x
Update Quote x

22/9
Skipping making tag helper, this is an UI component, so it will take some time to create. 
Skipping CRUD UI board. Use chatgpt prebuilt form

Not skipping toast

24/9
Adding tagNames for quoteSequence upon adding / update. It affects these APIs:

admin createQuoteSequence

auth emailServiceSignup

30/9
Change all name to camelCase.. Cái tội đặt tên cẩu thả
Change allQuoteSequencesTable first. Then we works on inputs and searches.
Modify inputs for quoteSequences. Then Modals
Modify inputs for Users. Then Modals
Modify inputs for Tags. Then Modals

10/1
Adding focus remove error logic

Continue configuration for buttons.

3/10
Readonly: Sequence type, tags, send daily at.

4/10:
daily => cant change tags.

5/10 
Search for quotesequence doesnt works: tags, lastSendingDay, startsendingday => done

6/10
Gender, date search query doesn't work, fix that


Configure delete and update

7/10:

Write an actual plan looking at the UI what you need to steamline the UI building process. An actual plan.
Move dark mode to another store

Write favorite quote admin api for specified user (can be delayed after user has favorited something)
(before building the user UI)
Write the backend for authenticated => getAllQuotes..

=> done writing APIs


next up on the list, is unauthenticated pages. This included:
-> home
-> get-random-quote


Remember that admin get redirected to admin panel

8/10
test that hamburger


=============================================================

Quên tài khoản nữa :(
Backend:
0. Adding share quote functionality
1. Fix the tag query when get tags (it's using $in right now)
2. Adding languages onto quotes (for now, adding vn).
3. Adding message queue to handle mass email sending
4. Adding AI asking backend functionality

Frontend:
1. Making Vietnamese language frontend templates alongside with english templates
2. Adding a simple AI asking mechanism for quotes meaning 

8/11/2024
=> Học grid, và viết lại login bằng grid. Tại sao lại là grid thì là để viết res bằng tailwind

=> Vẽ lại hết UI cho mobile phần user để đảm nhiệm thêm các chức năng:
0. Vẽ lại UI cho Tag query logic => user, admin

=> Những phần phải thêm checkbox cho tag input:
- Quote tag search query ==> done
- Frontend user search query ==> done
- Quote Sequences tag search query ==> done
- Tags related tag search query ==> done
=> Những phần phải thêm field Tag option (tag query type) (all / each)
- Quote sequence table => done
- Tag table => done

=> Backend maybe phải thay đổi:
- Thêm tag tagQueryType field vào quoteSequence db model ==> done
- Quote tag search logic / getAllQuotes (auth) + getQuotes (admin) ==> done
task fe
===> Thêm tagQueryType cho checkbox

- QuoteSequence search logic (Thêm 1 field nữa trên frontend cho tagQueryTypeOnly) ==> done
task fe
===> Thêm tagQueryType cho checkbox, tagQueryTypeOnly cho field mới ở search của quoteSequence


- QuoteSequence add logic (test cho cả daily và random) => done
- Related tags search logic => done
- Ng đăng kí quote sequence (authenticated api) => done
- All quote user frontend logic (sửa giống quote tag search logic) => done


===> Build tiếp UI và deploy... Tại vì thực sự cần 1 code base dễ scale hơn để viết những cái dưới. Làm requirement fail nên fix đi fix lại rất tốn tg
Cố vẽ lại UI xem có scale được k, giờ dùng shadcn rồi

task design
0.5. Vẽ UI cho share to facebook => Done

1. Sửa backend cho email để handle scaling khi có nhiều mail => backend 

Task: revoke 2fa from job.ndchinh2003@gmail.com, then create a new email to handle only utilities stuff (not using pool)

==================================
Future planning:

1. Chuyển đổi ngôn ngữ trang web (chỉ support eng và viet) => user
2. Chức năng thêm các ngôn ngữ khác cho câu trích dẫn (hiện tại chỉ support cho eng, viet, và extend được) => Admin
3. Chức năng thêm gợi ý cách dịch cho câu trích dẫn cho một ngôn ngữ khác => donator
4. Hỏi AI về câu trích dẫn (prompt nội dung, để người dùng truyền thêm nội dung field country vào, mặc định sẽ là country của người dùng) => user tự nhập api key
5. Chức năng hẹn lịch, đặt mục tiêu, xây dựng mục tiêu, và gửi những câu cảm hứng cho người dùng theo mục tiêu đã được xây dựng bằng AI => donator (xem có cách nào k phải tự nhập api key k)
6. Chức năng share câu trích dẫn => user
7. Chức năng survey ticket (cái này sẽ ít người dùng, nhưng rất cần để về sau scale) => Nếu tiến độ dự án thuận lợi, thì làm => user, admin
8. Làm 1 cái UI nhỏ Buy me a coffee => user
(Sau khi vẽ, xem xét backend sẽ xử lý dữ liệu như nào trước, có logic gì đặc thù không, rồi mới viết API. Sau đó mới thực hiện triển khai trên front)

db.quotesequences.deleteMany({email: "ndchinh2003@gmail.com"})

25/11:
Finish configuring error toast for quote sequence, users, tags.

